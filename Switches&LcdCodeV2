#include <xc.h>
#pragma config JTAGEN = OFF     
#pragma config FWDTEN = OFF
#pragma config FNOSC =	FRCPLL
#pragma config FSOSCEN =	OFF
#pragma config POSCMOD =	EC
#pragma config OSCIOFNC =	ON
#pragma config FPBDIV =     DIV_1
#pragma config FPLLIDIV =	DIV_2
#pragma config FPLLMUL =	MUL_20
#pragma config FPLLODIV =	DIV_1
#define Set_SW0_in() TRISFbits.TRISF3 = 1
#define Set_SW1_in() TRISFbits.TRISF5 = 1
#define Set_SW2_in() TRISFbits.TRISF4 = 1
#define Set_SW3_in() TRISDbits.TRISD15 = 1
#define Set_SW4_in() TRISDbits.TRISD14 = 1
#define Set_SW5_in() {TRISBbits.TRISB11 = 1;ANSELBbits.ANSB11 = 0;}
#define Set_SW6_in() {TRISBbits.TRISB10 = 1;ANSELBbits.ANSB10 = 0;}// RB10 (SW6) disabled analog
#define Set_SW7_in() {TRISBbits.TRISB9 = 1;ANSELBbits.ANSB9 = 0;}// RB9 (SW7) disabled analog
#define Set_Speaker() {TRISBbits.TRISB14 = 0;ANSELBbits.ANSB14 = 0;}
#define SW0() PORTFbits.RF3
#define SW1() PORTFbits.RF5
#define SW2() PORTFbits.RF4
#define SW3() PORTDbits.RD15
#define SW4() PORTDbits.RD14
#define SW5() PORTBbits.RB11
#define SW6() PORTBbits.RB10
#define SW7() PORTBbits.RB9
#define SPEAKER() PORTBbits.RB14 
#define burn() {PORTDbits.RD4=1;PORTDbits.RD4=0;}
#define setControl(){ PORTBbits.RB15=0;PORTDbits.RD5=0;}
#define setData(){ PORTBbits.RB15=1;PORTDbits.RD5=0;}
#define setScreen(){ TRISBbits.TRISB15 = 0; TRISDbits.TRISD5 = 0;TRISDbits.TRISD4 = 0;}
#define disableAnalogScreen(){ANSELBbits.ANSB15 = 0;ANSELEbits.ANSE2 = 0;ANSELEbits.ANSE4 = 0;ANSELEbits.ANSE5 = 0;ANSELEbits.ANSE6 = 0;ANSELEbits.ANSE7 = 0;}
static const int rowSize=16;
static const int firstRowStart=0x80;
static const int secondRowStart=0xc0;
static const int firstRowEnd=0x8f;
static const int secondRowEnd=0xcf;
typedef enum {MODE0,MODE1,MODE2,MODE5,MODE6,MODE7,eNofModes} eModes;
typedef enum {COUNTER_UP,SHIFT_UP,SWING_UP,COUNTER_DOWN,SHIFT_DOWN,SWING_DOWN,BEEP_MODE,HALT,EXIT,eNofModesDesc} eModesDesc;
typedef enum {SLOW,FAST,eNoofLevels} Level;
static char * Modes[eNofModes] = {"Mode 0:","Mode 1:","Mode 2:","Mode 5:","Mode 6:","Mode 7:"};
static char * ModesDescSlow[eNofModesDesc] = {"Counter Up Slow","Shift Right Slow","Swing Up Slow","Counter Down Slow","Shift Left Slow",
"Swing Down Slow","Beep Mode","Halt","Exit"};
static char * ModesDescFast[eNofModesDesc] = {"Counter Up Fast","Shift Right Fast","Swing Up Fast","Counter Down Fast","Shift Left Fast",
"Swing Down Fast","Beep Mode","Halt","Exit"};
static int delay[eNoofLevels]={3,1};
void busy(void);
void bashApplier(char string[] ,int length,int con);
void setMode(eModes mode);
void setModeDesc(eModesDesc modeDesc,Level level,int * round);
void move(char string[],int length,int sPoint,int round);
void setStartRound(eModesDesc modeDesc,Level level,int * round);
void clearSecondRow();
int strlen(	const char *str);
void clearScreen();
void main()
{ 
    int j=100,i=100;
    int rotate=0;//Up-Down Integer
    int round=0;// counting the rounds on the screen for the cycle- rowSize, means the last round before restart
    int repeat=-1;//minimazing the call of setMode every loop;=
    Level level=SLOW;//setting the speed of the system 
    char control[]={0x38,0x38,0x38,0xe,0x6,0x1};//restart the screen.
    TRISE&=0xff00;
    TRISA&=0Xff00;
    setScreen();
    disableAnalogScreen();
    Set_SW5_in();
    Set_SW6_in();
    Set_SW7_in();
    Set_Speaker();
    bashApplier(control,7,0);
    PORTA &= 0x00;
    while(!SW7())// checks the program isnt end - sw7
    {
        
        if(SW5() && repeat !=5 )
        {
            setMode(MODE5);//first time indicator , spend of cpu to put it inside the loop
            repeat=5;
            setStartRound(HALT,SLOW,&round);
        }
        while(SW5())
        {
            setModeDesc(HALT,SLOW,&round);
            for(int x=0;x<250000;x++);
        }// spin-wait sw5
        if(SW4()) // set the delay -sw4
           {
               level=FAST;
           }
           else
           {
               level=SLOW;
           }
        if(SW3())
        {
            if(rotate==0)clearSecondRow();
            rotate=1;
        // set the rotation -sw3
        }
        else 
        {
            if(rotate==1)clearSecondRow();
            rotate=0;
        }
        if(SW6())
        {
          if(repeat!=6)
          {
            setMode(MODE6);
            round=0;
            setModeDesc(BEEP_MODE,level,&round);
            repeat=6;
          } 
          SPEAKER() ^=1;
           for(;j<((100+i)*delay[level]);j++);//changing the loop length to create unique sound
           i+=100;
           if(i>1000){
               i=100;
               j=100;
               }
        }
        else
        {
            SPEAKER()=0;//resting and getting inside the other cases.
            i=100;
            j=100;
            if(SW2()) // menifa - sw2
            {
               
                if(!rotate)
                {
                    if(repeat!=2)
                    {
                       setMode(MODE2);
                       repeat=2;
                       setStartRound(SWING_UP,level,&round);

                    }
                    setModeDesc(SWING_UP,level,&round);
                    if((PORTA & 0xff) == 0x42)PORTA = (0x81+(PORTA & 0x00));//kind of better switch.
                    else if((PORTA & 0xff) == 0x24)PORTA = (0x42+(PORTA & 0x00));
                    else if((PORTA & 0xff) == 0x18)PORTA = (0x24+(PORTA & 0x00));
                                else PORTA = (0x18+(PORTA & 0x00));
                }
                else
                {
                    if(repeat!=2)
                    {
                      setMode(MODE2);
                      repeat=2;
                      setStartRound(SWING_DOWN,level,&round);

                    }
                    setModeDesc(SWING_DOWN,level,&round);
                    if((PORTA & 0xff) == 0x81)PORTA =(0x42+(PORTA & 0x00));
                    else if((PORTA & 0xff) == 0x42)PORTA = (0x24+(PORTA & 0x00));
                    else if((PORTA & 0xff) == 0x24)PORTA = (0x18+(PORTA & 0x00));
                                else PORTA = (0x81+(PORTA & 0x00));
                }
            }
            else
            { 
                if(SW1()) // shift - sw1
                {

                   if(!rotate)
                   {
                       if(repeat!=1)
                       {
                            setMode(MODE1);
                            repeat=1;
                            setStartRound(SHIFT_UP,level,&round);
                       } 
                       setModeDesc(SHIFT_UP,level,&round);
                       if((PORTA & 0xff) == 0x00)PORTA +=0x01;//overflows
                       else   PORTA<<=1;
                   }
                   else 
                   {
                        if(repeat!=1)//reseting text postion
                        {
                            setMode(MODE1);
                            repeat=1;
                            setStartRound(SHIFT_DOWN,level,&round);
                        } 
                        setModeDesc(SHIFT_DOWN,level,&round);
                        if((PORTA & 0xff) == 0x00) PORTA+=0xff;//overflows
                        else  PORTA>>=1;
                   }
                 }
                else if(SW0()) // counter- sw0
                {
                    if(!rotate)
                    {
                        if(repeat!=0)
                        {
                            setMode(MODE0);
                            repeat=0;
                            setStartRound(COUNTER_UP,level,&round);
                        } 
                        setModeDesc(COUNTER_UP,level,&round);
                        PORTA++;
                    }
                    else
                    {
                        if(repeat!=0)
                        {
                            setMode(MODE0);
                            repeat=0;
                            setStartRound(COUNTER_DOWN,level,&round);
                        } 
                        setModeDesc(COUNTER_DOWN,level,&round);
                        PORTA--;
                    }
                }
            }
            for(;j<((100+i)*delay[level]*500);j++);
        }
        
    }
    setMode(MODE7);
    setStartRound(EXIT,SLOW,&round);
    for(int y=0;y<100000;y++)
    {
    setModeDesc(EXIT,level,&round);
    for(int x=0;x<2500000;x++);
    }
}

int strlen(	const char *str)
{
	register const char *s;

	for (s = str; *s; ++s);
	return(s - str);
}

void busy(void)
{
    char RD,RS;
    int STATUS_TRISE;
    int portMap;
    
    RD=PORTDbits.RD5;
    RS=PORTBbits.RB15;
    STATUS_TRISE=TRISE;
    
	PORTDbits.RD5 = 1;//w/r
	PORTBbits.RB15 = 0;//rs 
    
    portMap = TRISE;
	portMap |= 0x80;
	TRISE = portMap;
    
    do
     {
        burn();
     }while(PORTEbits.RE7); // BF ?????
     
    PORTDbits.RD5=RD; 
    PORTBbits.RB15=RS;
    TRISE=STATUS_TRISE;   
}
void bashApplier(char string[], int length,int con)//just use to take burn array from the bash for data or control based on con
{
    PORTBbits.RB15=con;
    PORTDbits.RD5=0;//w=0
    for(int i=0;i<length;i++)
    {
        PORTE=string[i];
        burn();
        busy();
    }
}
void print(char string[],int length,int sPos)//printing the char array in the location given based on the lcd size
{
     if(sPos>secondRowEnd || sPos<firstRowStart)return; //checking overflows by default.
     setControl();
     PORTE= sPos;
     burn();
     busy();
     setData();
     
    for(int i=0;i<length & sPos+i<=secondRowEnd && sPos+i>=firstRowStart;i++)//checking overflows each spin to save cpu time.
    {
        PORTE=string[i];
        burn();
        busy();
    }
        PORTE=' ';// null terminator, also makes sure when we move the string its will remove backsteps.
        burn();
        busy();
 
}
void setMode(eModes mode)
{
   clearScreen();
   int firstRowPos=firstRowEnd;
   char * string=Modes[mode];//getting the right mode based on the enum
   for(int i=1;i<=rowSize;i++)
    {
    print(string,strlen(string),firstRowPos-i);//printing and moving
    for(int y=0;y<64000;y++);
    }
}
void setModeDesc(eModesDesc modeDesc,Level level,int * round)
{
    char * Description;
    int sPoint=secondRowEnd;//setting start point 
    if(level==SLOW)Description=ModesDescSlow[modeDesc];//getting the right string from the string arrays.
    else Description=ModesDescFast[modeDesc];
    int length=strlen(Description);//getting the size.
    if(length>=rowSize)//2 situations, 1)bge row size. 2)lgtrow size
    {
        if(*round>length)*round=0;
        print(Description+*round,length-*round,sPoint-(rowSize-1));//print it in the start and start moving the string forward by pointer
        print(Description,length,(sPoint+1+(length-(rowSize-1))-*round));//letting the full text fill in before cycling at the end to create the illusion
        
    }
    else
    {
        if(*round>(rowSize-1))*round=0;
        print(Description+*round,length-*round,sPoint-(rowSize-1));//same as 1, but the text isnt filling the row size 
        //, so we will not need to modify the second print
        print(Description,length,(sPoint+1)-*round);
    }
    *round+=1;
}
void setStartRound(eModesDesc modeDesc,Level level,int * round)//generates the correct round to start the cycle
//sliding to the right and cycling,as desribed in the requirements.
{
   int length;
   if(level==SLOW)length=strlen(ModesDescSlow[modeDesc]);//set the right index for the illusion
   else length=strlen(ModesDescFast[modeDesc]);
   if(length<rowSize)
   {
       *round=length;
   }
   else if(length>rowSize)
   {
       *round=length-(rowSize+1);
   }
   else *round=0;
   
}
void clearSecondRow()// cleaning the second row after roration , might remind some pieces by switching.
{
    setControl();
    PORTE= secondRowStart;//control code.
    burn();
    busy();
    setData();
    for(int i=0;i<rowSize;i++)
    {
        PORTE='_';
        burn();
        busy();
    }
}
void clearScreen()
{
     setControl();
     PORTE= 0x1;//control code.
     burn();
     busy();
}
